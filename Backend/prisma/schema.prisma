generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  prn         String            @id
  studentName String
  email       String            @unique
  phoneNo     String?           @db.VarChar(15)
  password    String            @db.VarChar(255)
  college     College           @default(ICEM)
  approvals   ApprovalRequest[]
  profile     StudentProfile?
  tickets     Ticket[]
}

model StudentProfile {
  profileId          Int           @id @default(autoincrement())
  prn                String        @unique
  studentID          String?
  fatherName         String?
  motherName         String?
  caste              String?
  subCaste           String?
  nationality        String?
  placeOfBirth       String?
  dateOfBirth        DateTime?
  dobWords           String?
  lastCollege        String?
  yearOfAdmission    Int?
  branch             String?
  admissionMode      AdmissionMode
  reasonForLeaving   String?
  lcGenerated        Boolean       @default(false)
  lcReady            Boolean       @default(false)
  lcUrl              String?
  dateOfAdmission    DateTime?
  dateOfLeaving      DateTime?
  progressAndConduct String?
  isFormEditable     Boolean       @default(true)
  forMigrationFlag   Boolean       @default(false)
  createdAt          DateTime      @default(now())
  deletedRequests    Boolean       @default(false)
  student            Student       @relation(fields: [prn], references: [prn])
}

model Department {
  deptId           Int               @id @default(autoincrement())
  deptName         String
  branchId         Int?
  college          College           @default(ICEM)
  deptHeadId       Int?              @unique
  approvalRequests ApprovalRequest[]
  deptHead         Staff?            @relation("DepartmentHead", fields: [deptHeadId], references: [staffId])
  staff            Staff[]
}

model Staff {
  staffId          Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  passwordHash     String
  deptId           Int
  performedActions ApprovalAction[]  @relation("StaffActions")
  createdRequests  ApprovalRequest[] @relation("StaffRequests")
  headedDepartment Department?       @relation("DepartmentHead")
  department       Department        @relation(fields: [deptId], references: [deptId])
}

model StaffLoginLog {
  id        Int      @id @default(autoincrement())
  staffId   Int
  staffName String
  loginAt   DateTime @default(now())
  ipAddress String?
  userAgent String?
}

model ApprovalRequest {
  approvalId       Int              @id @default(autoincrement())
  deptId           Int
  status           ApprovalStatus   @default(PENDING)
  approvedAt       DateTime?
  remarks          String?
  deptName         String?
  branch           String?
  studentName      String?
  yearOfAdmission  Int?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  studentPrn       String
  createdByStaffId Int?
  actions          ApprovalAction[]
  createdByStaff   Staff?           @relation("StaffRequests", fields: [createdByStaffId], references: [staffId])
  department       Department       @relation(fields: [deptId], references: [deptId])
  student          Student          @relation(fields: [studentPrn], references: [prn])

  @@unique([studentPrn, deptId])
}

model ApprovalAction {
  actionId   Int             @id @default(autoincrement())
  approvalId Int
  action     ActionType
  remarks    String?
  actionAt   DateTime?       @default(now())
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  staffId    Int
  approval   ApprovalRequest @relation(fields: [approvalId], references: [approvalId])
  staff      Staff           @relation("StaffActions", fields: [staffId], references: [staffId])
}

model SuperAdmin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  @@map("SuperAdmin")
}

model Ticket {
  id           Int     @id @default(autoincrement())
  ticketId     String  @unique // TKT-1234567890
  subject      String
  description  String
  category     String
  department   String // Department name from your API
  contactEmail String
  contactPhone String?
  relatedTo    String?
  status       Status  @default(OPEN)

  // Student reference (if logged in)
  studentPrn String?
  student    Student? @relation(fields: [studentPrn], references: [prn])

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  closedAt  DateTime?

  @@map("tickets")
}

enum AdmissionMode {
  FIRSTYEAR
  DIRECTSECONDYEAR
  MBA
  MCA
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUESTED_INFO
}

enum ActionType {
  APPROVED
  REJECTED
  REQUESTED_INFO
  COMMENTED
  REOPENED
}

enum College {
  ICEM
  IGSB
  ALL
}

enum Status {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
